import "./imports/DwyerPatterns.spectra"

spec Patrolling

define DX := 4;
define DY := 4;

type DimX = Int(0..DX);
type DimY = Int(0..DY);

sys DimX robotX;
sys DimY robotY;

//TODO: complete the specification
env DimX tarAX;
env DimY tarAY;
env DimX tarBX;
env DimY tarBY;
env DimX tarCX;
env DimY tarCY;

define
  inTopLeftCorner :=  robotX=0 & robotY=0;    
  inCharger := robotX=DX & robotY=0;
  inA := (robotX=tarAX & robotY=tarAY);
  inB := (robotX=tarBX & robotY=tarBY);
  inC := (robotX=tarCX & robotY=tarCY);
  
predicate dontMove(DimX x , DimY y):
	x= next(x) &
	y = next(y);  

predicate moveDistX(DimX pos):
  pos+1 = next(pos) |
  pos   = next(pos) |
  pos-1 = next(pos);
  
predicate moveDistY(DimY pos):
  pos+1 = next(pos) |
  pos   = next(pos) |
  pos-1 = next(pos);
  
predicate isOnObstacle(DimX x , DimY y):
	((x=1 & y=1) | 
  (x=2 & y=1) |
  (x=0 & y=3) |
  (x=3 & y=3) |
  (x=3 & y=4) );  

		

asm alw dontMove(tarAX,tarAY);
asm alw dontMove(tarBX,tarBY);
asm alw dontMove(tarCX,tarCY);

// Target locations are never on the fixed obstacle locations.
asm alw !isOnObstacle(tarAX,tarAY);
asm alw !isOnObstacle(tarBX,tarBY);
asm alw !isOnObstacle(tarCX,tarCY);

 
 guarantee startInTopLeftCorner:
  ini inTopLeftCorner;  
 
gar robotMoves:
  always moveDistX(robotX) & moveDistY(robotY);  
  
gar alw !isOnObstacle(robotX,robotY); 
  
//gar alwEv inA;
//gar alwEv inB;
//gar alwEv inC;


//  
////____________________________  
//guarantee startInBed:
//  ini inBed;  
//
///**
// * restrict the moves of the monkey to go only to neighboring
// * squares
// * 
// */
//gar monkeyMoves:
//  always moveDist(monkey[0]) & moveDist(monkey[1]); 
//    
///**
// * make sure parameter changes by at most +/- one 
// * @param Dim pos
// */    
//predicate moveDistX(DimX pos):
//  pos+1 = next(pos) |
//  pos   = next(pos) |
//  pos-1 = next(pos);
//  
//predicate moveDistY(DimY pos):
//  pos+1 = next(pos) |
//  pos   = next(pos) |
//  pos-1 = next(pos);
//  
//       
//    
//gar
//  alwEv inBed;
//  
//gar
//  alwEv atTV;
//  
//gar haveShowerAfterLeavingTVandGoingToBed:
//  P_becomes_true_between_Q_and_R(inShower, atTV, inBed);  
//  
//gar alwaysEventuallyEatABanana:
//  alwEv atBanana;  
//  
///**
// * use an assumption to only consider environments with bananas that stay
// */
//asm bananasDontMoveUntilMonkeyIsThere:
//  always !atBanana -> (banana[0]=next(banana[0]) & banana[1]=next(banana[1]));
  
